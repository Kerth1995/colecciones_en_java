=============== Interface List ==================
1.There are four kind of Linked Lists

	1. Simple Linked List
	2. Circular simple Linked List
	3. Double Linked List (LinkedList use this shape)
	4. Circular double Linked List

2. ArrayList VS LinkedList
	
	1. ArrayList: It is good to (GET) value, check if (CONTAIN) any value and to get the (NEXT) value.
	2. LinkedList: It is good to (ADD) any value in any position, (REMOVE) any value in any position and to get the (NEXT) value.
	3. LinkedList es una clase doblemente enlazada, lo que signifca que el nodo anteriormente agregado tiene una referencia del siguiente nodo y viciversa.	
	4. ArrayList esta conformado por arreglos.

3. Los ArrayList son de flujo asincrono. Los ArrayList solo incremente el array interno en un 50%. Internamente la clase ArrayList utiliza iteradores para realizar las iteraciones

4. La clase Vecto es una clase para implementar listas, aunque actualmente ya no se utiliza mucho. Tiene un velocidad lenta para las iteraciones. Ademas la clase Vector puede utilizar iteradores o enumeradores y trabaja de forma sincronizada al momento de hacer iteraciones.

5. Las View Collections, se utiliza para crear una especie de ventana o referencia a un arreglo, para ello utilizamos el metodo asList de la clase Arrays. Por ejemplo;

	String[] nombres = {"Manuel", "Jordan", "Jorge", "Ortencio"};
	List<String> nombresList = Arrays.asList(nombres); // eso es una view collection

O tambien se puede dar cuando creamos sub lista de una lista.
	List<String> miSublista = nombresList.subList(0, 2); //  esto tambien es una view collection


====================== Pilas (Stack) y Colas (Queue) ======================
1. Las pilas y colas son colecciones de datos 
==== PILAS (Stack) =====

1. Las pilas son structuras de tipo LIFO (Last in - First out), el ultimo elemento en entrar es el primero en salir.

2. El ultimo elemento apliado se le denomina Top o Top of stack y el primer elemnto apilado se le llama buttom.

3. Para agregar elementos utilizamos el metodo Push() y para obtener un elemento utilizamos el metodo Pop().

4. El ordenamiento es de orden natural, los datos de almacenan uno detras de otro.

5. Para obtener la cabecera de una pila se utiliza el metodo peek()


==== COLAS (Queue) =====

1. Las colas son estructuras de datos FIFO (First in - First out), el primer elemento en entrar es el primero elemento en salir.

2. El primer elemento encolado se como conoce como Front o Head y al Ãºltimo elemento encolado se le conoce como Back o Tail

3. Para agregar elementos a una cola se le conoce como Enqueue (encolado) para sacar u obtener elementos de una cola se conoce como Dequeue (desencolar) 

4. El ordenamiento es de orden natural, los datos de almacenan uno detras de otro.

==== BICOLAS ====

1. La bicola o doble cola es un tipo de cola especial

2. Se puede representar a partir de un vector y dos indices, frecuentemente se utiliza en listas circulares doblemente enlazadas

3. Para implementar bicolas se utiliza la interfaz Deque


==== COLAS DE PRIORIDAD ====

1. El ordenamiento de este tipo de colas es en base a un ordenamiento basado en prioridades.

2. Para implementar este tipo de colas, se utiliza la clase PriorityQueue3. 

3. El desencolamiento de la cola tambien es en base a una prioridad especificada


===== BINARY HEAP ====

1. Un Monticulo Binario o Binary Heap es una estructura de datos de tipo arbol binario izquierdista cuyos nodos cumplen con la propiedad heap

2. Un arbol binario es un grafo cuyos nodos solamente tienen dos hijos como maximo

3. Los nodos se insertan de izquierda a derecha

4. Debe de tener la propiedad de Heap o Maximos. lo que significa que el nodo superior tiene mayor prioridad que el nodo inferior



